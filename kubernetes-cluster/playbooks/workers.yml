---
- name: Install Kubernetes Worker
  hosts: workers
  become: true
  roles: 
    - common_tasks
  tasks:
  
  - name: Include vars.yml
    include_vars:
      file: "{{ playbook_dir }}/vars.yml"

  - debug: 
      var: join_command

  - name: Create .kube directory for the user
    file:
      path: /home/vagrant/.kube
      state: directory
    when: not ansible_check_mode  # This ensures it only runs in normal mode, not check mode

  - name: Copy kubeconfig to the user's .kube directory
    copy:
      src: ./kubeconfig.yaml
      dest: /home/vagrant/.kube/config
      owner: vagrant
      group: vagrant
      mode: 0600

  - name: Create .kube directory for the root user
    file:
      path: /root/.kube
      state: directory
    when: not ansible_check_mode  # This ensures it only runs in normal mode, not check mode

  - name: Copy kubeconfig to the root user's .kube directory
    copy:
      src: ./kubeconfig.yaml
      dest: /root/.kube/config
      owner: root
      group: root
      mode: 0600

  - name: Check if hostname exists in vars.yml
    lineinfile:
      path: "{{ playbook_dir }}/vars.yml"
      regexp: "^{{ inventory_hostname }}_joined:"
      state: absent
    check_mode: yes
    changed_when: false
    register: host_check
    become: false
    delegate_to: localhost

  - ansible.builtin.debug:
      var: host_check

  - name: Use kubectl to check the node
    shell: "kubectl get nodes | grep  {{ inventory_hostname }}" # Replace with the actual node name
    register: node_check
    ignore_errors: yes  # Ignore errors to handle the absence of the node

  - name: Display node existence status
    debug:
      var: node_check

  - name: Set default value if hostname does not exist
    lineinfile:
      path: "{{ playbook_dir }}/vars.yml"
      line: "{{ inventory_hostname }}_joined: {{ node_check.rc == 0 }}"
    when: host_check.found == 0
    become: false
    delegate_to: localhost

  - ansible.builtin.debug:
      var: hostvars[inventory_hostname][inventory_hostname ~ '_joined']

  - name: Joining control plane
    command: "{{ join_command }}"
    register: join_command_result
    ignore_errors: true
    when: node_check.rc != 0 and (hostvars[inventory_hostname][inventory_hostname ~ '_joined'] == False or not hostvars[inventory_hostname][inventory_hostname ~ '_joined'])

  - ansible.builtin.debug:
      var: join_command_result

  - name: Update join command result in vars.yml
    replace:
      path: "{{ playbook_dir }}/vars.yml"
      regexp: "{{ inventory_hostname }}_joined: .*"
      replace: "{{ inventory_hostname }}_joined: {{ not join_command_result.failed }}"
    delegate_to: localhost
    become: false
    when: join_command_result is changed and node_check.rc != 0
