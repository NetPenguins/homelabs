# -*- mode: ruby -*-
# vi: set ft=ruby :
module Providers
  PARALLELS = 'parallels'.freeze
  VIRTUALBOX = 'virtualbox'.freeze
  HYPERV = 'hyperv'.freeze
  VMWARE_FUSION = 'vmware_fusion'.freeze
  VMWARE_WORKSTATION = 'vmware_workstation'.freeze
  LIBVIRT = 'libvirt'.freeze
  DOCKER = 'docker'.freeze
  AWS = 'aws'.freeze
  AZURE = 'azure'.freeze
  GOOGLE = 'google'.freeze
  OPENSTACK = 'openstack'.freeze
  DIGITALOCEAN = 'digitalocean'.freeze
  HYPERKIT = 'hyperkit'.freeze
  KVM = 'kvm'.freeze
  LXC = 'lxc'.freeze
  LXD = 'lxd'.freeze
  NONE = 'none'.freeze
  POWERSHELL = 'powershell'.freeze
  SCALEWAY = 'scaleway'.freeze
  VAGRANT_CLOUD = 'vagrant_cloud'.freeze
end

Vagrant.configure("2") do |config|
    ####################################################
    #TODO: Change this to accomodate your architecture.
    ####################################################
    host_architecture = 'arm'
    ##################################################
    #TODO: Change this to accomodate your provider.  
    ##################################################
    provider = Providers::PARALLELS

    ##############################################
    # Set the box based on the host architecture
    ##############################################
    if host_architecture == 'arm'
        config.vm.box = "bento/debian-12-arm64" # ARM Based
    else
        config.vm.box = "bento/debian-12" # Intel Based
    end
    # Create Kubernetes master
    config.vm.define "master" do |master|
      master.vm.hostname = "master"
      master.vm.network "private_network", ip: "192.168.50.10"
      master.vm.provider provider do |v|
        v.memory = 8096 # TODO: Adjust these values to your builds needs. 
        v.cpus = 4
        v.name = "k8s-master-node"
      end
      # Install Kubernetes
      master.vm.provision "ansible" do |ansible|
        ansible.playbook = "./playbooks/master.yml"
      end
      # master.vm.provision "shell", path: "install-k8s-master.sh"
    end  

    # Create worker nodes
    (1..2).each do |i|
      config.vm.define "worker#{i}" do |worker|
        worker.vm.hostname = "worker#{i}"
        worker.vm.network "private_network", ip: "192.168.50.#{i+10}"
        
        worker.vm.provider provider do |v|
          v.memory = 4096
          v.cpus = 2
          v.name = "k8s-worker-#{i}"
        end

        # Provision the K8S worker nodes
        worker.vm.provision "ansible" do |ansible|
          ansible.playbook = "./playbooks/workers.yml"
          ansible.groups = {
            "workers" => ["worker#{i}"]
          }
        end

        # On destroy deregister the node from the master node.
        worker.trigger.before :destroy do |trigger|
          trigger.name = "Unregister K8s worker node"
          trigger.info = "Unregister"
          trigger.run_remote = { inline: <<-SHELL
            # Check if the node exists before attempting to unregister
            if kubectl get nodes | grep worker#{i} &> /dev/null; then
              kubectl drain worker#{i} --ignore-daemonsets
              kubectl cordon worker#{i}
              kubectl delete node worker#{i}
            else
              echo "Node worker#{i} does not exist in the cluster."
            fi
            SHELL
          }
        end
      end
    end
end